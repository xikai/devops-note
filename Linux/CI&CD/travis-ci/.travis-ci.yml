if: branch =~ ^master$|^development$|^release|^uat
language: python
group: stable
dist: trusty
os: linux
sudo: required
services:
- docker
cache: pip
before_install: |-
  if [ "master" == "${TRAVIS_BRANCH}" ]; then
    for env_value in $(compgen -v |grep '.*_PRODUCTION$'); do
      eval export ${env_value%_PRODUCTION}="${!env_value}"
    done
  elif [[ "${TRAVIS_BRANCH}" == release*  ]]; then
    for env_value in $(compgen -v |grep '.*_STAGING$'); do
      eval export ${env_value%_STAGING}="${!env_value}"
    done
  elif [[ "${TRAVIS_BRANCH}" == uat*  ]]; then
    for env_value in $(compgen -v |grep '.*_UAT$'); do
      eval export ${env_value%_UAT}="${!env_value}"
    done
  else
    for env_value in $(compgen -v |grep '.*_DEVELOPMENT$'); do
      eval export ${env_value%_DEVELOPMENT}="${!env_value}"
    done
  fi

install: |-
  # install awscli for ecr upload
  pip install awscli --upgrade
script: |-
  set -e
  tag_build_num="v${TRAVIS_BUILD_NUMBER}-build"
  export IMAGE="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:$tag_build_num"
  export IMAGE_LATEST="${AWS_REGISTRY_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/$AWS_ECR_NAME:latest"
  export ECR_LOGIN="aws ecr get-login --registry-ids $AWS_REGISTRY_ID --region $AWS_REGION --no-include-email"
  NAME=$AWS_ECR_NAME

  # build test image to run test
  docker build -t test \
    --target installer \
    --build-arg NPM_TOKEN=$NPM_TOKEN \
    .

  env | grep '^TRAVIS' > .env.travis
  env | grep '^COVERALLS' >> .env.travis

  docker run --rm \
    -v $PWD/coverage:/srv/coverage \
    --env-file .env.travis \
    test bash -c "
    yarn &&
    yarn lint --quiet &&
    yarn test --no-watch --coverage &&
    npx coveralls < coverage/lcov.info"

  # build the final image
  docker build -t "$IMAGE" -t $IMAGE_LATEST \
    --build-arg NPM_TOKEN=$NPM_TOKEN \
    .

  # cp swagger doc for s3
  docker run --rm \
    -v $PWD/s3_swagger_upload:/s3_swagger_upload \
    --entrypoint "" \
    $IMAGE \
    bash -c "cp -r /srv/src/routes/*.yaml /s3_swagger_upload/"

deploy:
# upload to ecr
- provider: script
  script:  >-
    $(AWS_ACCESS_KEY_ID=$AWS_ECR_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$AWS_ECR_SECRET_ACCESS_KEY $ECR_LOGIN)
    && docker push "$IMAGE"
    && docker push "$IMAGE_LATEST"
  skip_cleanup: true
  on:
    all_branches: true

- provider: s3
  access_key_id: ${AWS_S3_ACCESS_KEY_ID_SWAGGER}
  secret_access_key: ${AWS_S3_SECRET_ACCESS_KEY_SWAGGER}
  bucket: ${AWS_S3_BUCKET_SWAGGER}
  region: ${AWS_REGION_SWAGGER}
  local_dir: s3_swagger_upload
  upload_dir: ${TRAVIS_REPO_SLUG}/${TRAVIS_BRANCH}
  skip_cleanup: true
  on:
    all_branches: true
